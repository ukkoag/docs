"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[65],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,g=u["".concat(l,".").concat(c)]||u[c]||m[c]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3812:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const i={slug:"proposed",title:"Analytics API",authors:[{name:"Riyad Parvez",title:"Senior Software Engineer",url:"https://github.com/riyadparvez",image_url:"https://github.com/JoelMarcey.png"}],tags:["api"]},o=void 0,s={unversionedId:"proposed",id:"proposed",title:"Analytics API",description:"IMPORTANT",source:"@site/docs/proposed.md",sourceDirName:".",slug:"/proposed",permalink:"/docs/docs/proposed",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/proposed.md",tags:[{label:"api",permalink:"/docs/docs/tags/api"}],version:"current",frontMatter:{slug:"proposed",title:"Analytics API",authors:[{name:"Riyad Parvez",title:"Senior Software Engineer",url:"https://github.com/riyadparvez",image_url:"https://github.com/JoelMarcey.png"}],tags:["api"]},sidebar:"tutorialSidebar",previous:{title:"Weather Station API",permalink:"/docs/docs/intro"}},l={},d=[{value:"IMPORTANT",id:"important",level:2},{value:"Overview",id:"overview",level:2},{value:"Error Reporting and Debugging",id:"error-reporting-and-debugging",level:3},{value:"Data Format",id:"data-format",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Endpoints",id:"endpoints",level:2},{value:"Get Fields",id:"get-fields",level:3},{value:"Response",id:"response",level:4},{value:"Create a field",id:"create-a-field",level:3},{value:"Request",id:"request",level:4},{value:"Get Advisories",id:"get-advisories",level:3},{value:"Request",id:"request-1",level:4},{value:"Response",id:"response-1",level:4},{value:"Get Disease Risk Values",id:"get-disease-risk-values",level:3},{value:"Request",id:"request-2",level:4},{value:"Response",id:"response-2",level:4}],p={toc:d},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"important"},"IMPORTANT"),(0,a.kt)("p",null,"This is a proposed API spec. The actual API spec might differ from this, although not heavily."),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("h3",{id:"error-reporting-and-debugging"},"Error Reporting and Debugging"),(0,a.kt)("p",null,"We strongly recommend setting ",(0,a.kt)("inlineCode",{parentName:"p"},"X-REQUEST-ID")," header to UUID in each request. This will help us debug requests that failed. ",(0,a.kt)("inlineCode",{parentName:"p"},"X-REQUEST-ID")," header will also be set in response."),(0,a.kt)("h3",{id:"data-format"},"Data Format"),(0,a.kt)("p",null,"Timestamp should be in ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601")," format and in UTC timezone."),(0,a.kt)("h3",{id:"authentication"},"Authentication"),(0,a.kt)("h2",{id:"endpoints"},"Endpoints"),(0,a.kt)("h3",{id:"get-fields"},"Get Fields"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GET https://external.ukkoag.com/v0.1/field")),(0,a.kt)("h4",{id:"response"},"Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Returns all the accessible fields.\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[   \n    {\n        "uuid": "string",\n        "name": "string",\n        "latitude": "",\n        "longitude": "",\n        "crop": "string",\n        "created_timestamp": "ISO format. UTC timezone",\n        "planting_date": "ISO format. UTC timezone",\n        "models": [\n            "Lateblight",\n            "Earlyblight"\n        ]\n    },\n    {\n        "uuid": "string",\n        "name": "string",\n        "latitude": "",\n        "longitude": "",\n        "crop": "string",\n        "created_timestamp": "ISO format. UTC timezone",\n        "planting_date": "ISO format. UTC timezone",\n        "models": [\n            "Lateblight",\n            "Earlyblight"\n        ]\n    }\n]\n')),(0,a.kt)("h3",{id:"create-a-field"},"Create a field"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"POST https://external.ukkoag.com/v0.1/field")),(0,a.kt)("h4",{id:"request"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "string",\n    "latitude": "",\n    "longitude": "",\n    "crop": "string",\n    "planting_date": "ISO format. UTC timezone",\n}\n')),(0,a.kt)("h3",{id:"get-advisories"},"Get Advisories"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GET https://external.ukkoag.com/v0.1/disease/advisories/<field_uuid>/<model_name>?start_timestamp=iso_format&end_timestamp=iso_format")),(0,a.kt)("h4",{id:"request-1"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"model_name:\nOPTIONAL. If model name is absent\n\nstart_timestamp:\n\nend_timestamp:\n\n")),(0,a.kt)("h4",{id:"response-1"},"Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"One advisory per day.\n\n* HIGH: \n* MEDIUM: \n* LOW: \n* DISABLED: can be for different reasons such as planting date, crop or cultivars input are missing.\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "local_date": "",\n        "urgency": "HIGH/MEDIUM/LOW/DISABLED"\n    }\n]\n')),(0,a.kt)("h3",{id:"get-disease-risk-values"},"Get Disease Risk Values"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GET https://external.ukkoag.com/v0.1/disease/risk/<field_uuid>/<model_name>?start_timestamp=iso_format&end_timestamp=iso_format")),(0,a.kt)("h4",{id:"request-2"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"field_uuid: \n\nmodel_name:\nNOT optional. Must be one of the values in the response ``\n\nstart_timestamp:\n\nend_timestamp:\n\n\nReturns disease risk data between `start_timestamp` and `end_timestamp`. Both ends are INCLUSIVE.\n`end_timestamp` can be nullable. In that case the API will return all the data upto the current hour.\nIf both `start_timestamp` and `end_timestamp` are absent, then the readings for the most recent\n24 hours will be returned.\n")),(0,a.kt)("h4",{id:"response-2"},"Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"`field_uuid`: ID of the field.\n\nHourly/daily (depending on the disease model) disease risk. If it's hourly the time will be in UTC timezone. If it's daily then it will be the date in the local timezone.\n\nNOTE: Disease risk values are NOT guaranteed to be immutable or non-nullable. As the risk depends on the weather forecast.\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "field_uuid": "string",\n    "readings": [\n        {\n            "timestamp": "ISO format. UTC timezone. Hourly",\n            "value": "degree"\n        },\n        {\n            "timestamp": "ISO format. UTC timezone. Hourly",\n            "value": "degree"\n        }\n    ]\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "field_uuid": "string",\n    "readings": [\n        {\n            "timestamp": "ISO format. UTC timezone. Hourly",\n            "wind_direction": "degree"\n        },\n        {\n            "timestamp": "ISO format. UTC timezone. Hourly",\n            "wind_direction": "degree"\n        }\n    ]\n}\n')))}m.isMDXComponent=!0}}]);